/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';

/**
 * Arguments used to create {@link Store}
 * @category Accounts
 * @category generated
 */
export type StoreArgs = {
  admin: web3.PublicKey;
  name: string;
  description: string;
};

const storeDiscriminator = [130, 48, 247, 244, 182, 191, 30, 26];
/**
 * Holds the data for the {@link Store} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Store implements StoreArgs {
  private constructor(
    readonly admin: web3.PublicKey,
    readonly name: string,
    readonly description: string,
  ) {}

  /**
   * Creates a {@link Store} instance from the provided args.
   */
  static fromArgs(args: StoreArgs) {
    return new Store(args.admin, args.name, args.description);
  }

  /**
   * Deserializes the {@link Store} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Store, number] {
    return Store.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Store} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<Store> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find Store account at ${address}`);
    }
    return Store.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link Store} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Store, number] {
    return storeBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Store} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return storeBeet.serialize({
      accountDiscriminator: storeDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Store} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: StoreArgs) {
    const instance = Store.fromArgs(args);
    return storeBeet.toFixedFromValue({
      accountDiscriminator: storeDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Store} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: StoreArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Store.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link Store} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      admin: this.admin.toBase58(),
      name: this.name,
      description: this.description,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const storeBeet = new beet.FixableBeetStruct<
  Store,
  StoreArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['admin', beetSolana.publicKey],
    ['name', beet.utf8String],
    ['description', beet.utf8String],
  ],
  Store.fromArgs,
  'Store',
);
