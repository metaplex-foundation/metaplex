/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category SetCollectionDuringMint
 * @category generated
 */
const setCollectionDuringMintStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'SetCollectionDuringMintInstructionArgs',
);
/**
 * Accounts required by the _setCollectionDuringMint_ instruction
 * @category Instructions
 * @category SetCollectionDuringMint
 * @category generated
 */
export type SetCollectionDuringMintInstructionAccounts = {
  candyMachine: web3.PublicKey;
  metadata: web3.PublicKey;
  payer: web3.PublicKey;
  collectionPda: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
  instructions: web3.PublicKey;
  collectionMint: web3.PublicKey;
  collectionMetadata: web3.PublicKey;
  collectionMasterEdition: web3.PublicKey;
  authority: web3.PublicKey;
  collectionAuthorityRecord: web3.PublicKey;
};

const setCollectionDuringMintInstructionDiscriminator = [103, 17, 200, 25, 118, 95, 125, 61];

/**
 * Creates a _SetCollectionDuringMint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 *
 * @category Instructions
 * @category SetCollectionDuringMint
 * @category generated
 */
export function createSetCollectionDuringMintInstruction(
  accounts: SetCollectionDuringMintInstructionAccounts,
) {
  const {
    candyMachine,
    metadata,
    payer,
    collectionPda,
    tokenMetadataProgram,
    instructions,
    collectionMint,
    collectionMetadata,
    collectionMasterEdition,
    authority,
    collectionAuthorityRecord,
  } = accounts;

  const [data] = setCollectionDuringMintStruct.serialize({
    instructionDiscriminator: setCollectionDuringMintInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: candyMachine,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: collectionPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: instructions,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionMasterEdition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionAuthorityRecord,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'),
    keys,
    data,
  });
  return ix;
}
